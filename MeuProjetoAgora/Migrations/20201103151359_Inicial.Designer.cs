// <auto-generated />
using System;
using MeuProjetoAgora.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MeuProjetoAgora.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20201103151359_Inicial")]
    partial class Inicial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MeuProjetoAgora.Models.Join.DivElemento", b =>
                {
                    b.Property<int>("DivId");

                    b.Property<int>("ElementoId");

                    b.HasKey("DivId", "ElementoId");

                    b.HasIndex("ElementoId");

                    b.ToTable("DivElemento");
                });

            modelBuilder.Entity("MeuProjetoAgora.Models.Join.DivPagina", b =>
                {
                    b.Property<int>("DivId");

                    b.Property<int>("PaginaId");

                    b.HasKey("DivId", "PaginaId");

                    b.HasIndex("PaginaId");

                    b.ToTable("DivPagina");
                });

            modelBuilder.Entity("MeuProjetoAgora.Models.Join.ElementoDependenteElemento", b =>
                {
                    b.Property<int>("ElementoDependenteId");

                    b.Property<int>("ElementoId");

                    b.HasKey("ElementoDependenteId", "ElementoId");

                    b.HasIndex("ElementoId");

                    b.ToTable("ElementoDependenteElemento");
                });

            modelBuilder.Entity("MeuProjetoAgora.Models.Join.PaginaCarouselPagina", b =>
                {
                    b.Property<int>("CarouselPaginaId");

                    b.Property<int>("PaginaId");

                    b.HasKey("CarouselPaginaId", "PaginaId");

                    b.HasIndex("PaginaId");

                    b.ToTable("PaginaCarouselPagina");
                });

            modelBuilder.Entity("MeuProjetoAgora.Models.business.Background", b =>
                {
                    b.Property<int>("IdBackground")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Background_Position");

                    b.Property<string>("Background_Repeat");

                    b.Property<string>("Cor");

                    b.Property<bool>("Gradiente");

                    b.Property<string>("Nome")
                        .IsRequired();

                    b.Property<int>("PaginaId");

                    b.Property<bool>("backgroundImage");

                    b.Property<bool>("backgroundTransparente");

                    b.Property<int?>("imagem_");

                    b.HasKey("IdBackground");

                    b.HasIndex("PaginaId");

                    b.HasIndex("imagem_");

                    b.ToTable("Background");
                });

            modelBuilder.Entity("MeuProjetoAgora.Models.business.BackgroundGradiente", b =>
                {
                    b.Property<int>("IdBackgroundGradiente");

                    b.Property<int>("Grau");

                    b.HasKey("IdBackgroundGradiente");

                    b.ToTable("BackgroundGradiente");
                });

            modelBuilder.Entity("MeuProjetoAgora.Models.business.Cadastro", b =>
                {
                    b.Property<int>("IdCadastro")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Bairro")
                        .IsRequired();

                    b.Property<string>("CEP")
                        .IsRequired();

                    b.Property<string>("Complemento")
                        .IsRequired();

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("Endereco")
                        .IsRequired();

                    b.Property<string>("Municipio")
                        .IsRequired();

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Telefone")
                        .IsRequired();

                    b.Property<string>("UF")
                        .IsRequired();

                    b.HasKey("IdCadastro");

                    b.ToTable("Cadastro");
                });

            modelBuilder.Entity("MeuProjetoAgora.Models.business.ContaBancaria", b =>
                {
                    b.Property<int>("IdContaBancaria")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Agencia");

                    b.Property<string>("ClienteId")
                        .IsRequired();

                    b.Property<string>("CodigoBanco");

                    b.Property<string>("Conta");

                    b.Property<string>("DVAgencia");

                    b.Property<string>("DVConta");

                    b.Property<string>("TipoConta");

                    b.HasKey("IdContaBancaria");

                    b.ToTable("ContaBancaria");
                });

            modelBuilder.Entity("MeuProjetoAgora.Models.business.Cor", b =>
                {
                    b.Property<int>("IdCor")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BackgroundGradienteId");

                    b.Property<string>("CorBackground");

                    b.Property<int>("Position");

                    b.Property<double>("Transparencia");

                    b.HasKey("IdCor");

                    b.HasIndex("BackgroundGradienteId");

                    b.ToTable("Cor");
                });

            modelBuilder.Entity("MeuProjetoAgora.Models.business.DadoFormulario", b =>
                {
                    b.Property<int>("IdDadoFormulario")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Campo");

                    b.Property<int>("Formulario");

                    b.Property<string>("Valor");

                    b.HasKey("IdDadoFormulario");

                    b.ToTable("DadoFormulario");
                });

            modelBuilder.Entity("MeuProjetoAgora.Models.business.Div", b =>
                {
                    b.Property<int>("IdDiv")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BorderRadius");

                    b.Property<string>("Colunas");

                    b.Property<int>("Desenhado");

                    b.Property<string>("Divisao");

                    b.Property<int>("EixoXBlocoFixado");

                    b.Property<int>("EixoYBlocoFixado");

                    b.Property<bool>("Fixado");

                    b.Property<int>("Height");

                    b.Property<string>("Nome")
                        .IsRequired();

                    b.Property<int>("Ordem");

                    b.Property<int>("Padding");

                    b.Property<int>("Pagina_");

                    b.Property<int>("background_");

                    b.HasKey("IdDiv");

                    b.HasIndex("background_");

                    b.ToTable("Div");
                });

            modelBuilder.Entity("MeuProjetoAgora.Models.business.Elemento.Elemento", b =>
                {
                    b.Property<int>("IdElemento")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Nome");

                    b.Property<int>("Ordem");

                    b.Property<int>("Pagina_");

                    b.HasKey("IdElemento");

                    b.ToTable("Elemento");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Elemento");
                });

            modelBuilder.Entity("MeuProjetoAgora.Models.business.Elemento.ElementoDependente", b =>
                {
                    b.Property<int>("IdElementoDependente")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Elemento_");

                    b.HasKey("IdElementoDependente");

                    b.HasIndex("Elemento_");

                    b.ToTable("ElementoDependente");
                });

            modelBuilder.Entity("MeuProjetoAgora.Models.business.InfoEntrega", b =>
                {
                    b.Property<int>("IdInfoEntrega")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AlturaCaixa");

                    b.Property<string>("CidadesEntrega");

                    b.Property<string>("ClienteId")
                        .IsRequired();

                    b.Property<int?>("ComprimentoCaixa");

                    b.Property<string>("EstadosEntrega");

                    b.Property<int?>("LarguraCaixa");

                    b.Property<int?>("PesoCaixa");

                    b.Property<decimal?>("ValorFrete");

                    b.Property<bool>("entregaCorreio");

                    b.HasKey("IdInfoEntrega");

                    b.ToTable("InfoEntrega");
                });

            modelBuilder.Entity("MeuProjetoAgora.Models.business.InfoVenda", b =>
                {
                    b.Property<int>("IdInfoVenda")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Bairro");

                    b.Property<string>("Cep");

                    b.Property<string>("Cidade");

                    b.Property<string>("ClienteId")
                        .IsRequired();

                    b.Property<string>("Cpf");

                    b.Property<string>("Estado");

                    b.Property<long>("Numero");

                    b.Property<string>("Rua");

                    b.HasKey("IdInfoVenda");

                    b.ToTable("InfoVenda");
                });

            modelBuilder.Entity("MeuProjetoAgora.Models.business.ItemRequisicao", b =>
                {
                    b.Property<int>("IdItem")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("PrecoUnitario");

                    b.Property<int>("Quantidade");

                    b.Property<int>("produto_");

                    b.Property<int>("requisicao_");

                    b.HasKey("IdItem");

                    b.HasIndex("produto_");

                    b.HasIndex("requisicao_");

                    b.ToTable("ItemRequisicao");
                });

            modelBuilder.Entity("MeuProjetoAgora.Models.business.MensagemChat", b =>
                {
                    b.Property<int>("IdMensagem")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Mensagem");

                    b.Property<string>("NomeUsuario");

                    b.Property<int>("Pagina");

                    b.HasKey("IdMensagem");

                    b.ToTable("MensagemChat");
                });

            modelBuilder.Entity("MeuProjetoAgora.Models.business.Pagina", b =>
                {
                    b.Property<int>("IdPagina")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ArquivoMusic");

                    b.Property<string>("Facebook");

                    b.Property<string>("Instagram");

                    b.Property<bool>("Margem");

                    b.Property<bool>("Menu");

                    b.Property<bool>("Music");

                    b.Property<string>("Rotas");

                    b.Property<string>("Titulo")
                        .IsRequired();

                    b.Property<bool>("Topo");

                    b.Property<string>("Twiter");

                    b.Property<int>("pedido_");

                    b.HasKey("IdPagina");

                    b.HasIndex("pedido_");

                    b.ToTable("Pagina");
                });

            modelBuilder.Entity("MeuProjetoAgora.Models.business.PastaImagem", b =>
                {
                    b.Property<int>("IdPastaImagem")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nome");

                    b.Property<int>("PaginaId");

                    b.HasKey("IdPastaImagem");

                    b.HasIndex("PaginaId");

                    b.ToTable("PastaImagem");
                });

            modelBuilder.Entity("MeuProjetoAgora.Models.business.Pedido", b =>
                {
                    b.Property<int>("IdPedido")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClienteId")
                        .IsRequired();

                    b.Property<DateTime>("Datapedido");

                    b.Property<string>("DominioTemporario")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<string>("Nome")
                        .IsRequired();

                    b.Property<string>("Status");

                    b.Property<bool>("Venda");

                    b.HasKey("IdPedido");

                    b.HasIndex("DominioTemporario")
                        .IsUnique();

                    b.ToTable("Pedido");
                });

            modelBuilder.Entity("MeuProjetoAgora.Models.business.Permissao", b =>
                {
                    b.Property<int>("IdPermissao")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NomePermissao");

                    b.Property<int>("Site");

                    b.Property<string>("UserName");

                    b.HasKey("IdPermissao");

                    b.ToTable("Permissao");
                });

            modelBuilder.Entity("MeuProjetoAgora.Models.business.Requisicao", b =>
                {
                    b.Property<int>("IdRequisicao");

                    b.Property<string>("ClienteId")
                        .IsRequired();

                    b.Property<DateTime>("DataPedidoCompra");

                    b.Property<string>("Status");

                    b.Property<string>("ValorPedido");

                    b.HasKey("IdRequisicao");

                    b.ToTable("Requisicao");
                });

            modelBuilder.Entity("MeuProjetoAgora.Models.business.Rota", b =>
                {
                    b.Property<int>("IdRota")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NomeRota");

                    b.HasKey("IdRota");

                    b.ToTable("Rota");
                });

            modelBuilder.Entity("MeuProjetoAgora.Models.business.Servico", b =>
                {
                    b.Property<int>("IdServico");

                    b.Property<string>("Descricao");

                    b.HasKey("IdServico");

                    b.ToTable("Servico");
                });

            modelBuilder.Entity("MeuProjetoAgora.Models.business.Telefone", b =>
                {
                    b.Property<int>("IdTelefone")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Celular")
                        .IsRequired();

                    b.Property<string>("ClienteId")
                        .IsRequired();

                    b.Property<string>("DDD_Celular")
                        .IsRequired();

                    b.Property<string>("DDD_Telefone");

                    b.Property<string>("Fone");

                    b.HasKey("IdTelefone");

                    b.ToTable("Telefone");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("MeuProjetoAgora.Models.business.Elemento.Campo", b =>
                {
                    b.HasBaseType("MeuProjetoAgora.Models.business.Elemento.Elemento");

                    b.Property<string>("Placeholder");

                    b.Property<string>("TipoCampo");

                    b.Property<string>("ValorCampo");

                    b.ToTable("Campo");

                    b.HasDiscriminator().HasValue("Campo");
                });

            modelBuilder.Entity("MeuProjetoAgora.Models.business.Elemento.Carousel", b =>
                {
                    b.HasBaseType("MeuProjetoAgora.Models.business.Elemento.Elemento");

                    b.ToTable("Carousel");

                    b.HasDiscriminator().HasValue("Carousel");
                });

            modelBuilder.Entity("MeuProjetoAgora.Models.business.Elemento.CarouselPagina", b =>
                {
                    b.HasBaseType("MeuProjetoAgora.Models.business.Elemento.Elemento");

                    b.HasDiscriminator().HasValue("CarouselPagina");
                });

            modelBuilder.Entity("MeuProjetoAgora.Models.business.Elemento.Dropdown", b =>
                {
                    b.HasBaseType("MeuProjetoAgora.Models.business.Elemento.Elemento");

                    b.HasDiscriminator().HasValue("Dropdown");
                });

            modelBuilder.Entity("MeuProjetoAgora.Models.business.Elemento.Formulario", b =>
                {
                    b.HasBaseType("MeuProjetoAgora.Models.business.Elemento.Elemento");

                    b.Property<string>("EstiloFormulario");

                    b.ToTable("Formulario");

                    b.HasDiscriminator().HasValue("Formulario");
                });

            modelBuilder.Entity("MeuProjetoAgora.Models.business.Elemento.Imagem", b =>
                {
                    b.HasBaseType("MeuProjetoAgora.Models.business.Elemento.Elemento");

                    b.Property<string>("ArquivoImagem");

                    b.Property<int?>("PastaImagemId");

                    b.HasIndex("PastaImagemId");

                    b.ToTable("Imagem");

                    b.HasDiscriminator().HasValue("Imagem");
                });

            modelBuilder.Entity("MeuProjetoAgora.Models.business.Elemento.Link", b =>
                {
                    b.HasBaseType("MeuProjetoAgora.Models.business.Elemento.Elemento");

                    b.Property<bool>("Menu");

                    b.Property<string>("TextoLink");

                    b.Property<bool>("UrlLink");

                    b.Property<int?>("paginaDestinoLink_");

                    b.HasIndex("paginaDestinoLink_");

                    b.ToTable("Link");

                    b.HasDiscriminator().HasValue("Link");
                });

            modelBuilder.Entity("MeuProjetoAgora.Models.business.Elemento.Produto", b =>
                {
                    b.HasBaseType("MeuProjetoAgora.Models.business.Elemento.Elemento");

                    b.Property<string>("Codigo")
                        .IsRequired();

                    b.Property<string>("Descricao");

                    b.Property<decimal>("Preco");

                    b.Property<string>("Segmento");

                    b.Property<long?>("estoque");

                    b.ToTable("Produto");

                    b.HasDiscriminator().HasValue("Produto");
                });

            modelBuilder.Entity("MeuProjetoAgora.Models.business.Elemento.Table", b =>
                {
                    b.HasBaseType("MeuProjetoAgora.Models.business.Elemento.Elemento");

                    b.Property<string>("EstiloTabela");

                    b.ToTable("Table");

                    b.HasDiscriminator().HasValue("Table");
                });

            modelBuilder.Entity("MeuProjetoAgora.Models.business.Elemento.Texto", b =>
                {
                    b.HasBaseType("MeuProjetoAgora.Models.business.Elemento.Elemento");

                    b.Property<string>("PalavrasTexto");

                    b.ToTable("Texto");

                    b.HasDiscriminator().HasValue("Texto");
                });

            modelBuilder.Entity("MeuProjetoAgora.Models.business.Elemento.Video", b =>
                {
                    b.HasBaseType("MeuProjetoAgora.Models.business.Elemento.Elemento");

                    b.Property<string>("ArquivoVideo");

                    b.ToTable("Video");

                    b.HasDiscriminator().HasValue("Video");
                });

            modelBuilder.Entity("MeuProjetoAgora.Models.Join.DivElemento", b =>
                {
                    b.HasOne("MeuProjetoAgora.Models.business.Div", "Div")
                        .WithMany("Elemento")
                        .HasForeignKey("DivId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MeuProjetoAgora.Models.business.Elemento.Elemento", "Elemento")
                        .WithMany("div")
                        .HasForeignKey("ElementoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MeuProjetoAgora.Models.Join.DivPagina", b =>
                {
                    b.HasOne("MeuProjetoAgora.Models.business.Div", "Div")
                        .WithMany("Pagina")
                        .HasForeignKey("DivId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MeuProjetoAgora.Models.business.Pagina", "Pagina")
                        .WithMany("Div")
                        .HasForeignKey("PaginaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MeuProjetoAgora.Models.Join.ElementoDependenteElemento", b =>
                {
                    b.HasOne("MeuProjetoAgora.Models.business.Elemento.ElementoDependente", "ElementoDependente")
                        .WithMany("Elemento")
                        .HasForeignKey("ElementoDependenteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MeuProjetoAgora.Models.business.Elemento.Elemento", "Elemento")
                        .WithMany("Despendentes")
                        .HasForeignKey("ElementoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MeuProjetoAgora.Models.Join.PaginaCarouselPagina", b =>
                {
                    b.HasOne("MeuProjetoAgora.Models.business.Elemento.CarouselPagina", "CarouselPagina")
                        .WithMany("Paginas")
                        .HasForeignKey("CarouselPaginaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MeuProjetoAgora.Models.business.Pagina", "Pagina")
                        .WithMany("CarouselPagina")
                        .HasForeignKey("PaginaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MeuProjetoAgora.Models.business.Background", b =>
                {
                    b.HasOne("MeuProjetoAgora.Models.business.Pagina", "Pagina")
                        .WithMany("Background")
                        .HasForeignKey("PaginaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MeuProjetoAgora.Models.business.Elemento.Imagem", "imagem")
                        .WithMany("Backgrounds")
                        .HasForeignKey("imagem_");
                });

            modelBuilder.Entity("MeuProjetoAgora.Models.business.BackgroundGradiente", b =>
                {
                    b.HasOne("MeuProjetoAgora.Models.business.Background", "Background")
                        .WithOne("BackgroundGradiente")
                        .HasForeignKey("MeuProjetoAgora.Models.business.BackgroundGradiente", "IdBackgroundGradiente")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MeuProjetoAgora.Models.business.Cor", b =>
                {
                    b.HasOne("MeuProjetoAgora.Models.business.BackgroundGradiente", "BackgroundGradiente")
                        .WithMany("Cores")
                        .HasForeignKey("BackgroundGradienteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MeuProjetoAgora.Models.business.Div", b =>
                {
                    b.HasOne("MeuProjetoAgora.Models.business.Background", "Background")
                        .WithMany()
                        .HasForeignKey("background_")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MeuProjetoAgora.Models.business.Elemento.ElementoDependente", b =>
                {
                    b.HasOne("MeuProjetoAgora.Models.business.Elemento.Elemento", "Dependente")
                        .WithMany()
                        .HasForeignKey("Elemento_");
                });

            modelBuilder.Entity("MeuProjetoAgora.Models.business.ItemRequisicao", b =>
                {
                    b.HasOne("MeuProjetoAgora.Models.business.Elemento.Produto", "produto")
                        .WithMany("Itens")
                        .HasForeignKey("produto_")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MeuProjetoAgora.Models.business.Requisicao", "Requisicao")
                        .WithMany("ItemRequisicao")
                        .HasForeignKey("requisicao_")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MeuProjetoAgora.Models.business.Pagina", b =>
                {
                    b.HasOne("MeuProjetoAgora.Models.business.Pedido", "Pedido")
                        .WithMany("Paginas")
                        .HasForeignKey("pedido_")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MeuProjetoAgora.Models.business.PastaImagem", b =>
                {
                    b.HasOne("MeuProjetoAgora.Models.business.Pagina", "Pagina")
                        .WithMany("Pastas")
                        .HasForeignKey("PaginaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MeuProjetoAgora.Models.business.Requisicao", b =>
                {
                    b.HasOne("MeuProjetoAgora.Models.business.Cadastro", "Cadastro")
                        .WithOne("Requisicao")
                        .HasForeignKey("MeuProjetoAgora.Models.business.Requisicao", "IdRequisicao")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MeuProjetoAgora.Models.business.Servico", b =>
                {
                    b.HasOne("MeuProjetoAgora.Models.business.Pedido", "Pedido")
                        .WithOne("Servico")
                        .HasForeignKey("MeuProjetoAgora.Models.business.Servico", "IdServico")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MeuProjetoAgora.Models.business.Elemento.Imagem", b =>
                {
                    b.HasOne("MeuProjetoAgora.Models.business.PastaImagem", "PastaImagem")
                        .WithMany("Imagens")
                        .HasForeignKey("PastaImagemId");
                });

            modelBuilder.Entity("MeuProjetoAgora.Models.business.Elemento.Link", b =>
                {
                    b.HasOne("MeuProjetoAgora.Models.business.Pagina", "Destino")
                        .WithMany()
                        .HasForeignKey("paginaDestinoLink_");
                });
#pragma warning restore 612, 618
        }
    }
}

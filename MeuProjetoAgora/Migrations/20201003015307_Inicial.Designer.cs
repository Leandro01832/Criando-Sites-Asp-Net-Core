// <auto-generated />
using System;
using MeuProjetoAgora.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MeuProjetoAgora.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20201003015307_Inicial")]
    partial class Inicial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MeuProjetoAgora.Models.Join.CarouselImagem", b =>
                {
                    b.Property<int>("ImagemId");

                    b.Property<int>("CarouselId");

                    b.HasKey("ImagemId", "CarouselId");

                    b.HasIndex("CarouselId");

                    b.ToTable("CarouselImagem");
                });

            modelBuilder.Entity("MeuProjetoAgora.Models.Join.DivImagem", b =>
                {
                    b.Property<int>("ImagemId");

                    b.Property<int>("DivId");

                    b.HasKey("ImagemId", "DivId");

                    b.HasIndex("DivId");

                    b.ToTable("DivImagem");
                });

            modelBuilder.Entity("MeuProjetoAgora.Models.Join.ProdutoImagem", b =>
                {
                    b.Property<int>("ImagemId");

                    b.Property<int>("ProdutoId");

                    b.HasKey("ImagemId", "ProdutoId");

                    b.HasIndex("ProdutoId");

                    b.ToTable("ProdutoImagem");
                });

            modelBuilder.Entity("MeuProjetoAgora.Models.business.Background", b =>
                {
                    b.Property<int>("IdBackground")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Background_Position");

                    b.Property<string>("Background_Repeat");

                    b.Property<string>("Cor");

                    b.Property<bool>("Gradiente");

                    b.Property<string>("Nome")
                        .IsRequired();

                    b.Property<int>("PaginaId");

                    b.Property<bool>("backgroundImage");

                    b.Property<bool>("backgroundTransparente");

                    b.Property<int?>("imagem_");

                    b.HasKey("IdBackground");

                    b.HasIndex("PaginaId");

                    b.HasIndex("imagem_");

                    b.ToTable("Background");
                });

            modelBuilder.Entity("MeuProjetoAgora.Models.business.BackgroundGradiente", b =>
                {
                    b.Property<int>("IdBackgroundGradiente");

                    b.Property<int>("Grau");

                    b.HasKey("IdBackgroundGradiente");

                    b.ToTable("BackgroundGradiente");
                });

            modelBuilder.Entity("MeuProjetoAgora.Models.business.Campo", b =>
                {
                    b.Property<int>("IdCampo")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nome");

                    b.Property<string>("Placeholder");

                    b.Property<string>("Tipo");

                    b.Property<int?>("formularioIdForm");

                    b.HasKey("IdCampo");

                    b.HasIndex("formularioIdForm");

                    b.ToTable("Campo");
                });

            modelBuilder.Entity("MeuProjetoAgora.Models.business.Carousel", b =>
                {
                    b.Property<int>("IdCarousel")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nome")
                        .IsRequired();

                    b.Property<int>("div_2");

                    b.HasKey("IdCarousel");

                    b.HasIndex("div_2");

                    b.ToTable("Carousel");
                });

            modelBuilder.Entity("MeuProjetoAgora.Models.business.ContaBancaria", b =>
                {
                    b.Property<int>("IdContaBancaria")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Agencia");

                    b.Property<string>("ClienteId")
                        .IsRequired();

                    b.Property<string>("CodigoBanco");

                    b.Property<string>("Conta");

                    b.Property<string>("DVAgencia");

                    b.Property<string>("DVConta");

                    b.Property<string>("TipoConta");

                    b.HasKey("IdContaBancaria");

                    b.ToTable("ContaBancaria");
                });

            modelBuilder.Entity("MeuProjetoAgora.Models.business.Cor", b =>
                {
                    b.Property<int>("IdCor")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BackgroundGradienteId");

                    b.Property<string>("CorBackground");

                    b.Property<int>("Position");

                    b.Property<double>("Transparencia");

                    b.HasKey("IdCor");

                    b.HasIndex("BackgroundGradienteId");

                    b.ToTable("Cor");
                });

            modelBuilder.Entity("MeuProjetoAgora.Models.business.Div", b =>
                {
                    b.Property<int>("IdDiv")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BorderRadius");

                    b.Property<string>("Colunas");

                    b.Property<int>("Desenhado");

                    b.Property<string>("Divisao");

                    b.Property<int>("Height");

                    b.Property<string>("Nome")
                        .IsRequired();

                    b.Property<int>("Ordem");

                    b.Property<int>("Padding");

                    b.Property<int?>("PaginaId");

                    b.Property<int>("background_");

                    b.HasKey("IdDiv");

                    b.HasIndex("PaginaId");

                    b.HasIndex("background_");

                    b.ToTable("Div");
                });

            modelBuilder.Entity("MeuProjetoAgora.Models.business.Elemento", b =>
                {
                    b.Property<int>("IdElemento")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Ordem");

                    b.Property<bool>("Renderizar");

                    b.Property<int?>("carousel_");

                    b.Property<int?>("div_2");

                    b.Property<int?>("form_");

                    b.Property<int?>("imagem_");

                    b.Property<int?>("link_");

                    b.Property<int?>("table_");

                    b.Property<int?>("texto_");

                    b.Property<int?>("video_");

                    b.HasKey("IdElemento");

                    b.HasIndex("carousel_");

                    b.HasIndex("div_2");

                    b.HasIndex("form_");

                    b.HasIndex("imagem_");

                    b.HasIndex("link_");

                    b.HasIndex("table_");

                    b.HasIndex("texto_");

                    b.HasIndex("video_");

                    b.ToTable("Elemento");
                });

            modelBuilder.Entity("MeuProjetoAgora.Models.business.Endereco", b =>
                {
                    b.Property<int>("IdEndereco")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Bairro");

                    b.Property<string>("Cep");

                    b.Property<string>("Cidade");

                    b.Property<string>("ClienteId")
                        .IsRequired();

                    b.Property<string>("Estado");

                    b.Property<long>("Numero");

                    b.Property<string>("Rua");

                    b.HasKey("IdEndereco");

                    b.ToTable("Endereco");
                });

            modelBuilder.Entity("MeuProjetoAgora.Models.business.EnderecoRequisicao", b =>
                {
                    b.Property<int>("IdEnderecoRequisicao");

                    b.Property<string>("Bairro");

                    b.Property<string>("Cep");

                    b.Property<string>("Cidade");

                    b.Property<string>("Estado");

                    b.Property<long>("NumeroCasa");

                    b.Property<string>("Rua");

                    b.HasKey("IdEnderecoRequisicao");

                    b.ToTable("EnderecoRequisicao");
                });

            modelBuilder.Entity("MeuProjetoAgora.Models.business.Formulario", b =>
                {
                    b.Property<int>("IdForm")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Model");

                    b.Property<string>("Nome");

                    b.Property<int>("div_");

                    b.Property<int>("link_");

                    b.HasKey("IdForm");

                    b.HasIndex("div_");

                    b.HasIndex("link_");

                    b.ToTable("Form");
                });

            modelBuilder.Entity("MeuProjetoAgora.Models.business.Imagem", b =>
                {
                    b.Property<int>("IdImagem")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Arquivo");

                    b.Property<int?>("PastaImagemId");

                    b.HasKey("IdImagem");

                    b.HasIndex("PastaImagemId");

                    b.ToTable("Imagem");
                });

            modelBuilder.Entity("MeuProjetoAgora.Models.business.InfoEntrega", b =>
                {
                    b.Property<int>("IdInfoEntrega")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AlturaCaixa");

                    b.Property<string>("CidadesEntrega");

                    b.Property<string>("ClienteId")
                        .IsRequired();

                    b.Property<int?>("ComprimentoCaixa");

                    b.Property<string>("EstadosEntrega");

                    b.Property<int?>("LarguraCaixa");

                    b.Property<int?>("PesoCaixa");

                    b.Property<decimal?>("ValorFrete");

                    b.Property<bool>("entregaCorreio");

                    b.HasKey("IdInfoEntrega");

                    b.ToTable("InfoEntrega");
                });

            modelBuilder.Entity("MeuProjetoAgora.Models.business.InfoVenda", b =>
                {
                    b.Property<int>("IdInfoVenda")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClienteId")
                        .IsRequired();

                    b.Property<string>("Cpf");

                    b.HasKey("IdInfoVenda");

                    b.ToTable("InfoVenda");
                });

            modelBuilder.Entity("MeuProjetoAgora.Models.business.ItemRequisicao", b =>
                {
                    b.Property<int>("IdItem")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Quantidade");

                    b.Property<int>("produto_");

                    b.Property<int>("requisicao_");

                    b.HasKey("IdItem");

                    b.HasIndex("produto_");

                    b.HasIndex("requisicao_");

                    b.ToTable("ItemRequisicao");
                });

            modelBuilder.Entity("MeuProjetoAgora.Models.business.Link", b =>
                {
                    b.Property<int>("IdLink")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TextoLink");

                    b.Property<bool>("Url");

                    b.Property<int?>("div_");

                    b.Property<int?>("imagem_");

                    b.Property<int?>("pagina_");

                    b.Property<int?>("texto_");

                    b.HasKey("IdLink");

                    b.HasIndex("div_");

                    b.HasIndex("imagem_");

                    b.HasIndex("pagina_");

                    b.HasIndex("texto_");

                    b.ToTable("Link");
                });

            modelBuilder.Entity("MeuProjetoAgora.Models.business.MensagemChat", b =>
                {
                    b.Property<int>("IdMensagem")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Mensagem");

                    b.Property<string>("NomeUsuario");

                    b.Property<int>("Pagina");

                    b.HasKey("IdMensagem");

                    b.ToTable("MensagemChat");
                });

            modelBuilder.Entity("MeuProjetoAgora.Models.business.Pagina", b =>
                {
                    b.Property<int>("IdPagina")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ArquivoMusic");

                    b.Property<string>("Facebook");

                    b.Property<string>("Instagram");

                    b.Property<bool>("Margem");

                    b.Property<bool>("Music");

                    b.Property<string>("Rotas");

                    b.Property<string>("Titulo")
                        .IsRequired();

                    b.Property<string>("Twiter");

                    b.Property<int>("pedido_");

                    b.HasKey("IdPagina");

                    b.HasIndex("pedido_");

                    b.ToTable("Pagina");
                });

            modelBuilder.Entity("MeuProjetoAgora.Models.business.PastaImagem", b =>
                {
                    b.Property<int>("IdPastaImagem")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nome");

                    b.Property<int>("PaginaId");

                    b.HasKey("IdPastaImagem");

                    b.HasIndex("PaginaId");

                    b.ToTable("PastaImagem");
                });

            modelBuilder.Entity("MeuProjetoAgora.Models.business.Pedido", b =>
                {
                    b.Property<int>("IdPedido")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClienteId")
                        .IsRequired();

                    b.Property<DateTime>("Datapedido");

                    b.Property<string>("DominioTemporario")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<string>("Nome")
                        .IsRequired();

                    b.Property<string>("Status");

                    b.Property<bool>("Venda");

                    b.HasKey("IdPedido");

                    b.HasIndex("DominioTemporario")
                        .IsUnique();

                    b.ToTable("Pedido");
                });

            modelBuilder.Entity("MeuProjetoAgora.Models.business.Permissao", b =>
                {
                    b.Property<int>("IdPermissao")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NomePermissao");

                    b.Property<int>("Site");

                    b.Property<string>("UserName");

                    b.HasKey("IdPermissao");

                    b.ToTable("Permissao");
                });

            modelBuilder.Entity("MeuProjetoAgora.Models.business.Produto", b =>
                {
                    b.Property<int>("IdProduto")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descricao");

                    b.Property<string>("Nome");

                    b.Property<decimal>("Preco");

                    b.Property<long?>("estoque");

                    b.Property<int>("table_");

                    b.HasKey("IdProduto");

                    b.HasIndex("table_");

                    b.ToTable("Produto");
                });

            modelBuilder.Entity("MeuProjetoAgora.Models.business.Requisicao", b =>
                {
                    b.Property<int>("IdRequisicao")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClienteId")
                        .IsRequired();

                    b.Property<DateTime>("DataPedidoCompra");

                    b.Property<string>("Status");

                    b.Property<string>("ValorPedido");

                    b.HasKey("IdRequisicao");

                    b.ToTable("Requisicao");
                });

            modelBuilder.Entity("MeuProjetoAgora.Models.business.Rota", b =>
                {
                    b.Property<int>("IdRota")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NomeRota");

                    b.HasKey("IdRota");

                    b.ToTable("Rota");
                });

            modelBuilder.Entity("MeuProjetoAgora.Models.business.Servico", b =>
                {
                    b.Property<int>("IdServico");

                    b.Property<string>("Descricao");

                    b.HasKey("IdServico");

                    b.ToTable("Servico");
                });

            modelBuilder.Entity("MeuProjetoAgora.Models.business.Table", b =>
                {
                    b.Property<int>("IdTable")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Estilo");

                    b.Property<string>("Nome");

                    b.Property<int>("div_");

                    b.HasKey("IdTable");

                    b.HasIndex("div_");

                    b.ToTable("Table");
                });

            modelBuilder.Entity("MeuProjetoAgora.Models.business.Telefone", b =>
                {
                    b.Property<int>("IdTelefone")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Celular")
                        .IsRequired();

                    b.Property<string>("ClienteId")
                        .IsRequired();

                    b.Property<string>("DDD_Celular")
                        .IsRequired();

                    b.Property<string>("DDD_Telefone");

                    b.Property<string>("Fone");

                    b.HasKey("IdTelefone");

                    b.ToTable("Telefone");
                });

            modelBuilder.Entity("MeuProjetoAgora.Models.business.Texto", b =>
                {
                    b.Property<int>("IdTexto")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nome")
                        .IsRequired();

                    b.Property<string>("Palavras");

                    b.Property<int>("div_");

                    b.HasKey("IdTexto");

                    b.HasIndex("div_");

                    b.ToTable("Texto");
                });

            modelBuilder.Entity("MeuProjetoAgora.Models.business.Video", b =>
                {
                    b.Property<int>("IdVideo")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ArquivoVideo");

                    b.Property<int>("div_");

                    b.HasKey("IdVideo");

                    b.HasIndex("div_");

                    b.ToTable("Video");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("MeuProjetoAgora.Models.Join.CarouselImagem", b =>
                {
                    b.HasOne("MeuProjetoAgora.Models.business.Carousel", "Carousel")
                        .WithMany("imagens")
                        .HasForeignKey("CarouselId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MeuProjetoAgora.Models.business.Imagem", "Imagem")
                        .WithMany("Carousels")
                        .HasForeignKey("ImagemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MeuProjetoAgora.Models.Join.DivImagem", b =>
                {
                    b.HasOne("MeuProjetoAgora.Models.business.Div", "Div")
                        .WithMany("Imagem")
                        .HasForeignKey("DivId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MeuProjetoAgora.Models.business.Imagem", "Imagem")
                        .WithMany("Divs")
                        .HasForeignKey("ImagemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MeuProjetoAgora.Models.Join.ProdutoImagem", b =>
                {
                    b.HasOne("MeuProjetoAgora.Models.business.Imagem", "Imagem")
                        .WithMany("Produto")
                        .HasForeignKey("ImagemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MeuProjetoAgora.Models.business.Produto", "Produto")
                        .WithMany("Imagens")
                        .HasForeignKey("ProdutoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MeuProjetoAgora.Models.business.Background", b =>
                {
                    b.HasOne("MeuProjetoAgora.Models.business.Pagina", "Pagina")
                        .WithMany("Background")
                        .HasForeignKey("PaginaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MeuProjetoAgora.Models.business.Imagem", "imagem")
                        .WithMany("Backgrounds")
                        .HasForeignKey("imagem_");
                });

            modelBuilder.Entity("MeuProjetoAgora.Models.business.BackgroundGradiente", b =>
                {
                    b.HasOne("MeuProjetoAgora.Models.business.Background", "Background")
                        .WithOne("BackgroundGradiente")
                        .HasForeignKey("MeuProjetoAgora.Models.business.BackgroundGradiente", "IdBackgroundGradiente")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MeuProjetoAgora.Models.business.Campo", b =>
                {
                    b.HasOne("MeuProjetoAgora.Models.business.Formulario", "formulario")
                        .WithMany("Campos")
                        .HasForeignKey("formularioIdForm");
                });

            modelBuilder.Entity("MeuProjetoAgora.Models.business.Carousel", b =>
                {
                    b.HasOne("MeuProjetoAgora.Models.business.Div", "Div")
                        .WithMany("Carousel")
                        .HasForeignKey("div_2")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MeuProjetoAgora.Models.business.Cor", b =>
                {
                    b.HasOne("MeuProjetoAgora.Models.business.BackgroundGradiente", "BackgroundGradiente")
                        .WithMany("Cores")
                        .HasForeignKey("BackgroundGradienteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MeuProjetoAgora.Models.business.Div", b =>
                {
                    b.HasOne("MeuProjetoAgora.Models.business.Pagina", "Pagina")
                        .WithMany("Div")
                        .HasForeignKey("PaginaId");

                    b.HasOne("MeuProjetoAgora.Models.business.Background", "Background")
                        .WithMany()
                        .HasForeignKey("background_")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MeuProjetoAgora.Models.business.Elemento", b =>
                {
                    b.HasOne("MeuProjetoAgora.Models.business.Carousel", "carousel")
                        .WithMany()
                        .HasForeignKey("carousel_");

                    b.HasOne("MeuProjetoAgora.Models.business.Div", "div")
                        .WithMany("Elemento")
                        .HasForeignKey("div_2");

                    b.HasOne("MeuProjetoAgora.Models.business.Formulario", "form")
                        .WithMany()
                        .HasForeignKey("form_");

                    b.HasOne("MeuProjetoAgora.Models.business.Imagem", "imagem")
                        .WithMany()
                        .HasForeignKey("imagem_");

                    b.HasOne("MeuProjetoAgora.Models.business.Link", "link")
                        .WithMany()
                        .HasForeignKey("link_");

                    b.HasOne("MeuProjetoAgora.Models.business.Table", "table")
                        .WithMany()
                        .HasForeignKey("table_");

                    b.HasOne("MeuProjetoAgora.Models.business.Texto", "texto")
                        .WithMany()
                        .HasForeignKey("texto_");

                    b.HasOne("MeuProjetoAgora.Models.business.Video", "video")
                        .WithMany()
                        .HasForeignKey("video_");
                });

            modelBuilder.Entity("MeuProjetoAgora.Models.business.EnderecoRequisicao", b =>
                {
                    b.HasOne("MeuProjetoAgora.Models.business.Requisicao", "Requisicao")
                        .WithOne("Endereco")
                        .HasForeignKey("MeuProjetoAgora.Models.business.EnderecoRequisicao", "IdEnderecoRequisicao")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MeuProjetoAgora.Models.business.Formulario", b =>
                {
                    b.HasOne("MeuProjetoAgora.Models.business.Div", "div")
                        .WithMany("form")
                        .HasForeignKey("div_")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MeuProjetoAgora.Models.business.Link", "link")
                        .WithMany()
                        .HasForeignKey("link_")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MeuProjetoAgora.Models.business.Imagem", b =>
                {
                    b.HasOne("MeuProjetoAgora.Models.business.PastaImagem", "PastaImagem")
                        .WithMany("Imagens")
                        .HasForeignKey("PastaImagemId");
                });

            modelBuilder.Entity("MeuProjetoAgora.Models.business.ItemRequisicao", b =>
                {
                    b.HasOne("MeuProjetoAgora.Models.business.Produto", "produto")
                        .WithMany("Itens")
                        .HasForeignKey("produto_")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MeuProjetoAgora.Models.business.Requisicao", "Requisicao")
                        .WithMany("ItemRequisicao")
                        .HasForeignKey("requisicao_")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MeuProjetoAgora.Models.business.Link", b =>
                {
                    b.HasOne("MeuProjetoAgora.Models.business.Div", "div")
                        .WithMany("Link")
                        .HasForeignKey("div_");

                    b.HasOne("MeuProjetoAgora.Models.business.Imagem", "imagem")
                        .WithMany()
                        .HasForeignKey("imagem_");

                    b.HasOne("MeuProjetoAgora.Models.business.Pagina", "Destino")
                        .WithMany()
                        .HasForeignKey("pagina_");

                    b.HasOne("MeuProjetoAgora.Models.business.Texto", "texto")
                        .WithMany()
                        .HasForeignKey("texto_");
                });

            modelBuilder.Entity("MeuProjetoAgora.Models.business.Pagina", b =>
                {
                    b.HasOne("MeuProjetoAgora.Models.business.Pedido", "Pedido")
                        .WithMany("Paginas")
                        .HasForeignKey("pedido_")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MeuProjetoAgora.Models.business.PastaImagem", b =>
                {
                    b.HasOne("MeuProjetoAgora.Models.business.Pagina", "Pagina")
                        .WithMany("Pastas")
                        .HasForeignKey("PaginaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MeuProjetoAgora.Models.business.Produto", b =>
                {
                    b.HasOne("MeuProjetoAgora.Models.business.Table", "tabela")
                        .WithMany("Produtos")
                        .HasForeignKey("table_")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MeuProjetoAgora.Models.business.Servico", b =>
                {
                    b.HasOne("MeuProjetoAgora.Models.business.Pedido", "Pedido")
                        .WithOne("Servico")
                        .HasForeignKey("MeuProjetoAgora.Models.business.Servico", "IdServico")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MeuProjetoAgora.Models.business.Table", b =>
                {
                    b.HasOne("MeuProjetoAgora.Models.business.Div", "div")
                        .WithMany("Tabelas")
                        .HasForeignKey("div_")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MeuProjetoAgora.Models.business.Texto", b =>
                {
                    b.HasOne("MeuProjetoAgora.Models.business.Div", "div")
                        .WithMany("Textos")
                        .HasForeignKey("div_")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MeuProjetoAgora.Models.business.Video", b =>
                {
                    b.HasOne("MeuProjetoAgora.Models.business.Div", "div")
                        .WithMany("Video")
                        .HasForeignKey("div_")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
